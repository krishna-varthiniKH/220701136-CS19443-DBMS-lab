import mysql.connector
from tkinter import *
from tkinter import messagebox, ttk
from datetime import datetime  # Import datetime module

# Database operations
def connect():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",  # replace with your MySQL username
        password="password",  # replace with your MySQL password
        database="onlineshopping"  # replace with your MySQL database
    )
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255),
            category VARCHAR(255),
            price DECIMAL(10, 2),
            quantity INT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS customers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255),
            email VARCHAR(255),
            phone VARCHAR(15)
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            product_id INT,
            customer_id INT,
            order_date DATE,
            quantity INT,
            FOREIGN KEY (product_id) REFERENCES products(id),
            FOREIGN KEY (customer_id) REFERENCES customers(id)
        )
    """)

    conn.commit()
    conn.close()

# Product operations
def insert_product(name, category, price, quantity):
    if not price.replace('.', '', 1).isdigit() or not quantity.isdigit():
        messagebox.showerror("Input Error", "Price must be a number and Quantity must be an integer")
        return

    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("INSERT INTO products (name, category, price, quantity) VALUES (%s, %s, %s, %s)", (name, category, price, quantity))
    conn.commit()
    conn.close()
    view_command("products")

def view_products():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("SELECT * FROM products")
    rows = cur.fetchall()
    conn.close()
    return rows

# Customer operations
def insert_customer(name, email, phone):
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("INSERT INTO customers (name, email, phone) VALUES (%s, %s, %s)", (name, email, phone))
    conn.commit()
    conn.close()
    view_command("customers")

def view_customers():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("SELECT * FROM customers")
    rows = cur.fetchall()
    conn.close()
    return rows

# Order operations
def insert_order(product_id, customer_id, order_date, quantity):
    if not quantity.isdigit():
        messagebox.showerror("Input Error", "Quantity must be an integer")
        return

    try:
        # Validate the date format
        datetime.strptime(order_date, '%Y-%m-%d')
    except ValueError:
        messagebox.showerror("Input Error", "Order Date must be in YYYY-MM-DD format")
        return

    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("INSERT INTO orders (product_id, customer_id, order_date, quantity) VALUES (%s, %s, %s, %s)", (product_id, customer_id, order_date, quantity))
    conn.commit()
    conn.close()
    view_command("orders")

def view_orders():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="onlineshopping"
    )
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders")
    rows = cur.fetchall()
    conn.close()
    return rows

# GUI functions
def get_selected_row(event):
    global selected_tuple
    try:
        if list1.selection():
            item = list1.selection()[0]
            selected_tuple = list1.item(item, 'values')
            e1.delete(0, END)
            e1.insert(END, selected_tuple[1])
            e2.delete(0, END)
            e2.insert(END, selected_tuple[2])
            e3.delete(0, END)
            e3.insert(END, selected_tuple[3])
            e4.delete(0, END)
            e4.insert(END, selected_tuple[4])
    except IndexError:
        pass

def view_command(table):
    # Clear previous data
    list1.delete(*list1.get_children())
   
    # Insert attribute names as the first row based on the table
    if table == "products":
        list1.insert('', 'end', values=("ID", "NAME", "CATEGORY", "PRICE", "QUANTITY"))
        for row in view_products():
            list1.insert('', 'end', values=row)
    elif table == "customers":
        list1.insert('', 'end', values=("ID", "NAME", "EMAIL", "PHONE"))
        for row in view_customers():
            list1.insert('', 'end', values=row)
    elif table == "orders":
        list1.insert('', 'end', values=("ID", "PRODUCT_ID", "CUSTOMER_ID", "ORDER_DATE", "QUANTITY"))
        for row in view_orders():
            list1.insert('', 'end', values=row)

# Adding and searching functionalities are similar for all tables

connect()

# Create window object
window = Tk()
window.wm_title("Online Shopping Management System")
window.configure(bg='lightblue')

# Create frames for better organization and color coding
frame1 = Frame(window, bg='lightblue')
frame1.grid(row=0, column=0, padx=10, pady=10)

frame2 = Frame(window, bg='lightgreen')
frame2.grid(row=0, column=1, padx=10, pady=10)

frame3 = Frame(window, bg='lightcoral')
frame3.grid(row=0, column=2, padx=10, pady=10)

# Labels for product table
l1 = Label(frame1, text="Product Name", bg='lightblue')
l1.grid(row=0, column=0)
l2 = Label(frame1, text="Category", bg='lightblue')
l2.grid(row=1, column=0)
l3 = Label(frame1, text="Price", bg='lightblue')
l3.grid(row=2, column=0)
l4 = Label(frame1, text="Quantity", bg='lightblue')
l4.grid(row=3, column=0)

# Entries for product table
name_text = StringVar()
e1 = Entry(frame1, textvariable=name_text)
e1.grid(row=0, column=1)
category_text = StringVar()
e2 = Entry(frame1, textvariable=category_text)
e2.grid(row=1, column=1)
price_text = StringVar()
e3 = Entry(frame1, textvariable=price_text)
e3.grid(row=2, column=1)
quantity_text = StringVar()
e4 = Entry(frame1, textvariable=quantity_text)
e4.grid(row=3, column=1)

# Listbox -> Treeview for product table
list1 = ttk.Treeview(window, columns=("ID", "NAME", "CATEGORY", "PRICE", "QUANTITY"), show="headings", height=15)
list1.grid(row=1, column=0, columnspan=3)
# Scrollbar
sb1 = Scrollbar(window)
sb1.grid(row=1, column=3, rowspan=6)
list1.configure(yscrollcommand=sb1.set)
sb1.configure(command=list1.yview)

list1.bind('<<TreeviewSelect>>', get_selected_row)

# Buttons for product table
b1 = Button(frame1, text="View all Products", width=20, command=lambda: view_command("products"))
b1.grid(row=4, column=0, columnspan=2)
b2 = Button(frame1, text="Add Product", width=20, command=lambda: insert_product(name_text.get(), category_text.get(), price_text.get(), quantity_text.get()))
b2.grid(row=5, column=0, columnspan=2)

# Labels for customer table
l5 = Label(frame2, text="Customer Name", bg='lightgreen')
l5.grid(row=0, column=0)
l6 = Label(frame2, text="Email", bg='lightgreen')
l6.grid(row=1, column=0)
l7 = Label(frame2, text="Phone", bg='lightgreen')
l7.grid(row=2, column=0)

# Entries for customer table
customer_name_text = StringVar()
e5 = Entry(frame2, textvariable=customer_name_text)
e5.grid(row=0, column=1)
email_text = StringVar()
e6 = Entry(frame2, textvariable=email_text)
e6.grid(row=1, column=1)
phone_text = StringVar()
e7 = Entry(frame2, textvariable=phone_text)
e7.grid(row=2, column=1)

# Buttons for customer table
b3 = Button(frame2, text="View all Customers", width=20, command=lambda: view_command("customers"))
b3.grid(row=3, column=0, columnspan=2)
b4 = Button(frame2, text="Add Customer", width=20, command=lambda: insert_customer(customer_name_text.get(), email_text.get(), phone_text.get()))
b4.grid(row=4, column=0, columnspan=2)

# Labels for order table
l8 = Label(frame3, text="Product ID", bg='lightcoral')
l8.grid(row=0, column=0)
l9 = Label(frame3, text="Customer ID", bg='lightcoral')
l9.grid(row=1, column=0)
l10 = Label(frame3, text="Order Date (YYYY-MM-DD)", bg='lightcoral')
l10.grid(row=2, column=0)
l11 = Label(frame3, text="Quantity", bg='lightcoral')
l11.grid(row=3, column=0)

# Entries for order table
product_id_text = StringVar()
e8 = Entry(frame3, textvariable=product_id_text)
e8.grid(row=0, column=1)
customer_id_text = StringVar()
e9 = Entry(frame3, textvariable=customer_id_text)
e9.grid(row=1, column=1)
order_date_text = StringVar()
e10 = Entry(frame3, textvariable=order_date_text)
e10.grid(row=2, column=1)
order_quantity_text = StringVar()
e11 = Entry(frame3, textvariable=order_quantity_text)
e11.grid(row=3, column=1)

# Buttons for order table
b5 = Button(frame3, text="View all Orders", width=20, command=lambda: view_command("orders"))
b5.grid(row=4, column=0, columnspan=2)
b6 = Button(frame3, text="Add Order", width=20, command=lambda: insert_order(product_id_text.get(), customer_id_text.get(), order_date_text.get(), order_quantity_text.get()))
b6.grid(row=5, column=0, columnspan=2)

b7 = Button(window, text="Close", width=20, command=window.destroy)
b7.grid(row=2, column=3)

window.mainloop()

